name: ðŸªŸ Windows builds
on:
  workflow_call:
    inputs:
      godot-ref:
        description: A tag, branch or commit hash in the Godot repository.
        type: string
        default: master
      limboai-ref:
        description: A tag, branch or commit hash in the LimboAI repository.
        type: string
        default: master
      test-build:
        description: Limit to pre-defined test builds
        type: boolean
        default: false

  workflow_dispatch:
    inputs:
      godot-ref:
        description: A tag, branch or commit hash in the Godot repository.
        type: string
        default: master
      limboai-ref:
        description: A tag, branch or commit hash in the LimboAI repository.
        type: string
        default: master
      test-build:
        description: Limit to pre-defined test builds
        type: boolean
        default: false

# Global Settings
env:
  SCONSFLAGS: production=yes use_mingw=yes verbose=yes warnings=no progress=no d3d12=yes
  BUILD_IMAGE_VERSION: 4.5-f42
  MESA_VERSION: 23.1.9-1
  CACHE_LIMIT: 4

jobs:
  windows-builds:
    runs-on: "ubuntu-24.04"
    name: ${{ matrix.opts.name }}
    outputs:
      built-dotnet-editor: ${{ steps.mark-dotnet-editor.outputs.built-dotnet-editor }}
    strategy:
      fail-fast: false
      matrix:
        opts:
          # * Standard x86_64

          - name: Editor (x86_64, release)
            target: editor
            arch: x86_64
            llvm: false
            dotnet: false
            should-build: true

          - name: Template (x86_64, release)
            target: template_release
            arch: x86_64
            llvm: false
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          - name: Template (x86_64, debug)
            target: template_debug
            arch: x86_64
            llvm: false
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          # * Standard x86_32

          # - name: Editor (x86_32, release)
          #   target: editor
          #   arch: x86_32
          #   llvm: false
          #   dotnet: false
          # should-build: ${{ !inputs.test-build }}

          - name: Template (x86_32, release)
            target: template_release
            arch: x86_32
            llvm: false
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          - name: Template (x86_32, debug)
            target: template_debug
            arch: x86_32
            llvm: false
            dotnet: false
            should-build: ${{ !inputs.test-build }}

          # * Standard arm64

          # - name: Editor (arm64, release)
          #   target: editor
          #   arch: arm64
          #   llvm: true
          #   dotnet: false
          #   should-build: ${{ !inputs.test-build }}

          - name: Template (arm64, release)
            target: template_release
            arch: arm64
            llvm: true
            dotnet: false
            scons-flags: mingw_prefix=/root/llvm-mingw
            should-build: ${{ !inputs.test-build }}

          - name: Template (arm64, debug)
            target: template_debug
            arch: arm64
            llvm: true
            dotnet: false
            scons-flags: mingw_prefix=/root/llvm-mingw
            should-build: ${{ !inputs.test-build }}

          # * .NET x86_64

          - name: Editor .NET (x86_64, release)
            target: editor
            arch: x86_64
            llvm: false
            dotnet: true
            should-build: ${{ !inputs.test-build }}

          - name: Template .NET (x86_64, release)
            target: template_release
            arch: x86_64
            llvm: false
            dotnet: true
            should-build: ${{ !inputs.test-build }}

          - name: Template .NET (x86_64, debug)
            target: template_debug
            arch: x86_64
            llvm: false
            dotnet: true
            should-build: ${{ !inputs.test-build }}

          # * .NET x86_32

          # - name: Editor .NET (x86_32, release)
          #   target: editor
          #   arch: x86_32
          #   llvm: false
          #   dotnet: true
          # should-build: ${{ !inputs.test-build }}

          - name: Template .NET (x86_32, release)
            target: template_release
            arch: x86_32
            llvm: false
            dotnet: true
            should-build: ${{ !inputs.test-build }}

          - name: Template .NET (x86_32, debug)
            target: template_debug
            arch: x86_32
            llvm: false
            dotnet: true
            should-build: ${{ !inputs.test-build }}

            # * .NET arm64

          # - name: Editor .NET (arm64, release)
          #   target: editor
          #   arch: arm64
          #   llvm: true
          #   dotnet: true
          #   should-build: ${{ !inputs.test-build }}

          - name: Template .NET (arm64, release)
            target: template_release
            arch: arm64
            llvm: true
            dotnet: true
            scons-flags: mingw_prefix=/root/llvm-mingw
            should-build: ${{ !inputs.test-build }}

          - name: Template .NET (arm64, debug)
            target: template_debug
            arch: arm64
            llvm: true
            dotnet: true
            scons-flags: mingw_prefix=/root/llvm-mingw
            should-build: ${{ !inputs.test-build }}

        exclude:
          - { opts: { should-build: false } }

    env:
      BIN: godot.windows.${{matrix.opts.target}}.${{matrix.opts.arch}}${{matrix.opts.llvm && '.llvm' || ''}}${{matrix.opts.dotnet == true && '.mono' || ''}}

    steps:
      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ inputs.godot-ref }}

      - name: Clone LimboAI module
        uses: actions/checkout@v4
        with:
          path: modules/limboai
          ref: ${{ inputs.limboai-ref }}

      # Inits GODOT_VERSION, LIMBOAI_VERSION, NAME_PREFIX, GODOT_VERSION_STATUS, BUILD_NAME environment variables.
      - uses: ./modules/limboai/.github/actions/init-version

      - name: Set up scons cache
        if: inputs.test-build # ! Only cache test/PR builds
        uses: actions/cache@v4
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{env.BIN}}-${{inputs.godot-ref}}-${{inputs.limboai-ref}}-${{env.LIMBOAI_VERSION}}
          restore-keys: |
            ${{env.BIN}}-${{inputs.godot-ref}}-${{inputs.limboai-ref}}-${{env.LIMBOAI_VERSION}}
            ${{env.BIN}}-${{inputs.godot-ref}}-${{inputs.limboai-ref}}
            ${{env.BIN}}-${{inputs.godot-ref}}

      - name: Static ANGLE libs
        run: |
          mkdir -p deps/angle
          cd deps/angle
          url=https://github.com/godotengine/godot-angle-static/releases/download/chromium%2F6601.2/godot-angle-static
          curl -L -o windows_${{matrix.opts.arch}}.zip $url-${{matrix.opts.arch}}-${{matrix.opts.llvm && 'llvm' || 'gcc'}}-release.zip
          unzip windows_${{matrix.opts.arch}}.zip
          rm windows_${{matrix.opts.arch}}.zip

      - name: Mesa libs
        run: |
          mkdir -p deps/mesa
          cd deps/mesa
          curl -L -o mesa_${{matrix.opts.arch}}.zip https://github.com/godotengine/godot-nir-static/releases/download/${{env.MESA_VERSION}}/godot-nir-static-${{matrix.opts.arch}}-${{matrix.opts.llvm && 'llvm' || 'gcc'}}-release.zip
          unzip -o mesa_${{matrix.opts.arch}}.zip
          rm -f mesa_${{matrix.opts.arch}}.zip

      - name: Pull build container
        run: |
          podman pull ghcr.io/limbonaut/godot-windows:${{env.BUILD_IMAGE_VERSION}}

      - name: Build using container
        shell: bash
        run: |
          scons_command="scons \
              platform=windows \
              target=${{matrix.opts.target}} \
              arch=${{matrix.opts.arch}} \
              use_llvm=${{matrix.opts.llvm}} \
              module_mono_enabled=${{matrix.opts.dotnet}} \
              ${{env.SCONSFLAGS}} \
              ${{matrix.opts.scons-flags}} \
              angle_libs=/build/deps/angle \
              mesa_libs=/build/deps/mesa \
              cache_path=/build/.scons_cache \
              cache_limit=${{env.CACHE_LIMIT}}
          "
          podman_run="podman run -it --rm \
            --env GODOT_VERSION_STATUS=${GODOT_VERSION_STATUS} \
            --env BUILD_NAME=${BUILD_NAME} \
            --env NUM_CORES=$(nproc --all) \
            --env DOTNET_NOLOGO=true \
            --env DOTNET_CLI_TELEMETRY_OPTOUT=true \
            -v ${GITHUB_WORKSPACE}/:/build/ \
            -w /build godot-windows:${{env.BUILD_IMAGE_VERSION}} bash -c \
          "
          echo "Running ${podman_run} \"${scons_command}\""
          ${podman_run} "${scons_command}"

      - name: Prepare artifact
        shell: bash
        env:
          OUTDIR: ${{ startsWith(matrix.opts.target, 'template') && 'out/templates' || 'out/' }}
        run: |
          rm -f bin/*.{exp,lib,pdb}
          mkdir -p ${{env.OUTDIR}}
          mv bin/* ${{env.OUTDIR}}
          ls -R out/

      - name: Rename templates
        if: startsWith(matrix.opts.target, 'template')
        shell: bash
        env:
          BUILD_TYPE: ${{ endsWith(matrix.opts.target, 'release') && 'release' || 'debug' }}
        run: |
          mv out/templates/${BIN}.exe out/templates/windows_${BUILD_TYPE}_${{matrix.opts.arch}}.exe
          mv out/templates/${BIN}.console.exe out/templates/windows_${BUILD_TYPE}_${{matrix.opts.arch}}_console.exe
          echo "${GODOT_VERSION}.limboai+${LIMBOAI_VERSION}${{matrix.opts.dotnet == true && '.mono' || ''}}" > out/templates/version.txt
          ls -R out/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.NAME_PREFIX}}${{matrix.opts.dotnet == true && '.dotnet' || ''}}.${{matrix.opts.target}}.windows.${{matrix.opts.arch}}
          path: out/*

      - name: Mark .NET editor as built
        if: matrix.opts.dotnet && matrix.opts.target == 'editor'
        id: mark-dotnet-editor
        run: echo "built-dotnet-editor=true" >> $GITHUB_OUTPUT

  dotnet-assemblies:
    name: .NET assembly for ${{matrix.opts.arch}}
    needs: windows-builds
    if: always() && needs.windows-builds.outputs.built-dotnet-editor == 'true'
    runs-on: "windows-latest"
    strategy:
      fail-fast: false
      matrix:
        opts:
          - arch: x86_64
            llvm: false
    env:
      BIN: godot.windows.editor.${{matrix.opts.arch}}${{matrix.opts.llvm && '.llvm' || ''}}.mono
    steps:
      - name: Clone Godot
        uses: actions/checkout@v4
        with:
          repository: godotengine/godot
          ref: ${{ inputs.godot-ref }}

      - name: Clone LimboAI module
        uses: actions/checkout@v4
        with:
          path: modules/limboai
          ref: ${{ inputs.limboai-ref }}

      # Inits GODOT_VERSION, LIMBOAI_VERSION and NAME_PREFIX environment variables.
      - uses: ./modules/limboai/.github/actions/init-version

      - name: Reconstruct artifact name
        shell: bash
        run: |
          echo "ARTIFACT=${{env.NAME_PREFIX}}.dotnet.editor.windows.${{matrix.opts.arch}}" >> $GITHUB_ENV

      - name: Download editor artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{env.ARTIFACT}}
          path: bin/

      - name: Build .NET assemblies
        uses: ./modules/limboai/.github/actions/build-dotnet-assemblies
        with:
          platform: windows
          bin: ${{env.BIN}}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.ARTIFACT}}
          overwrite: true
          path: bin/*
